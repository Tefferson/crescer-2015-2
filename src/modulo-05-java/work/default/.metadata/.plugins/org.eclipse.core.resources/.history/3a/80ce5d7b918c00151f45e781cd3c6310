package br.com.cwi;

import java.util.ArrayList;
import java.util.List;

public class LinkedList {

    protected Node last, first;

    public void addFirst(String value) {
        Node node = new Node(value, first);

        if (isEmpty()) {
            last = node;
        }
        first = node;
    }

    public String getFirst() {
        return isEmpty() ? null : first.getValue();
    }

    public String getLast() {
        return isEmpty() ? null : last.getValue();
    }

    public boolean isEmpty() {
        return first == null;
    }

    public List<String> list() {
        ArrayList<String> list = new ArrayList<>();

        Node actual = first;

        while (actual != null) {
            list.add(actual.getValue());
            actual = actual.getNext();
        }

        return list;
    }

    public void addLast(String value) {
        Node newLast = new Node(value);

        if (isEmpty()) {
            first = newLast;
        } else {
            last.setNext(newLast);
        }
        last = newLast;
    }

    public void removeFirst() {
        if (!isEmpty()) {
            first = first.getNext();
        }
    }

    public void add(int index, String value) {

        if (index == 0 || first == null) {
            addFirst(value);
        } else {
            Node actualNode = getNode(index);

            if (actualNode != null) {
                Node newNode = new Node(value);

                newNode.setNext(actualNode.getNext());

                actualNode.setNext(newNode);
            }
        }
    }

    public void remove(int index) {
        if (index == 0 || first == null) {
            removeFirst();
        } else {
            Node actualNode = getNode(index);

            if (actualNode != null) {
                actualNode.setNext(actualNode.getNext().getNext());
            }
        }
    }

    private Node getNode(int index) {

        Node actualNode = first;
        if (index > 0) {
            for (int i = 1; i < index; i++) {
                if (actualNode == null) {
                    return null;
                }
                actualNode = actualNode.getNext();
            }
        }
        return actualNode;
    }

    protected class Node {

        private String value;

        private Node next;

        public Node(String value, Node next) {
            this.value = value;
            this.next = next;
        }

        public Node(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public Node getNext() {
            return next;
        }

        public void setNext(Node next) {
            this.next = next;
        }

        @Override
        public String toString() {
            return value;
        }

    }
}
